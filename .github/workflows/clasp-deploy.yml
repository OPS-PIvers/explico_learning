name: Auto Deploy Apps Script
# Test run to verify CLASPRC_JSON secret
on:
  push:
    branches:
      - main # Change this to your main branch if it's not named 'main'
      # Add other branches here if you want pushes to them to trigger deployment
jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 'lts/*' # Or a specific version like '18.x' or '20.x'
    - name: Install clasp
      run: npm install -g @google/clasp@2.4.2
    - name: Authenticate clasp
      run: |
        # Create the credentials file from the secret (raw JSON, not base64 encoded)
        echo '${{ secrets.CLASPRC_JSON }}' > ~/.clasprc.json
        # Validate JSON format (fails if not valid)
        jq empty ~/.clasprc.json || { echo "Invalid JSON in credentials"; cat ~/.clasprc.json; exit 1; }
        # Verify required fields exist
        jq -e '.tokens.default.access_token' ~/.clasprc.json > /dev/null || { echo "Missing access_token in credentials"; exit 1; }
        echo "✓ Credentials file created and validated successfully"
    - name: Build project files
      run: |
        # Run the build script to populate dist/ directory
        chmod +x ./build.sh
        ./build.sh
        # Verify dist directory has required files
        if [ ! -d "dist" ]; then
          echo "❌ dist directory not created by build script"
          exit 1
        fi
        echo "✓ Build completed, checking required files..."
        ls -la dist/
        # Check for key files
        [ -f "dist/Code.gs" ] || { echo "❌ Missing Code.gs"; exit 1; }
        [ -f "dist/constants.gs" ] || { echo "❌ Missing constants.gs"; exit 1; }
        [ -f "dist/appsscript.json" ] || { echo "❌ Missing appsscript.json"; exit 1; }
        echo "✓ All required files present in dist/"
    - name: Push code to Apps Script
      run: |
        # Change to dist directory (as specified in .clasp.json rootDir)
        cd dist
        # Use --force if you encounter issues with minor version bumps
        clasp push --force
    - name: Update deployment
      run: |
        # Change to dist directory for deployment as well
        cd dist
        # If you have a specific deployment ID to update, use this format
        if [ -n "${{ secrets.DEPLOYMENT_ID }}" ]; then
          clasp deploy --deploymentId ${{ secrets.DEPLOYMENT_ID }} --description "Auto-deployment $(date)"
        else
          clasp deploy --description "Auto-deployment $(date)"
        fi
    # Optional: Clean up the credentials file (good practice)
    - name: Clean up credentials
      if: always() # Run even if previous steps failed
      run: rm -f ~/.clasprc.json
